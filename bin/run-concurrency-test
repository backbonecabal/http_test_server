#!/bin/bash
set -euo pipefail

for cmd in convert jq gnuplot ruby ; do
  if ! command -v "${cmd}" &> /dev/null
  then
    echo "${cmd} could not be found"
    exit
  fi
done

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

VECTOR="${VECTOR:-vector}"
TEST_CMD="${TEST_CMD:-"${VECTOR} -vv --config ${DIR}/concurrency/vector.toml"}"
HTTP_TEST_SERVER="${HTTP_TEST_SERVER:-${DIR}/../http_test_server}"
OUTPUT_DIR="${OUTPUT_DIR:-$(mktemp -d -t vector-XXXXXXXXXX)}"
TEST_TIME=${TEST_TIME:-60} # how many seconds to run test for
HTTP_TEST_ADDRESS=${HTTP_TEST_ADDRESS:-localhost:8080}

# Can set:
#
# HTTP_TEST_LATENCY_MEAN
# HTTP_TEST_RATE_LIMIT_BEHAVIOR
# HTTP_TEST_RATE_LIMIT_BUCKET_CAPACITY
# HTTP_TEST_RATE_LIMIT_BUCKET_FILL_INTERVAL
# HTTP_TEST_RATE_LIMIT_BUCKET_QUANTUM
#
# See ../README.md for details

echo "writing output files to $OUTPUT_DIR"

export HTTP_TEST_SUMMARY_PATH="${OUTPUT_DIR}/summary.json"
export HTTP_TEST_PARAMETERS_PATH="${OUTPUT_DIR}/parameters.json"
export URL="http://${HTTP_TEST_ADDRESS}/"

echo "starting test server"
timeout ${TEST_TIME} ${HTTP_TEST_SERVER} 2>"${OUTPUT_DIR}/server.err" > "${OUTPUT_DIR}/server.log" &

echo "running test command"
timeout --signal KILL ${TEST_TIME} bash -c "${TEST_CMD}" 2>"${OUTPUT_DIR}/test_cmd.err" > "${OUTPUT_DIR}/test_cmd.log" &

wait

echo "processing output"
cat ${HTTP_TEST_SUMMARY_PATH} | ${DIR}/concurrency/summary_to_conurrent_requests_dat.rb > ${OUTPUT_DIR}/concurrent_requests.dat
cat ${HTTP_TEST_SUMMARY_PATH} | ${DIR}/concurrency/summary_to_requests_dat.rb > ${OUTPUT_DIR}/requests.dat

echo "plotting"
gnuplot \
  -e "parameters='$(cat ${HTTP_TEST_PARAMETERS_PATH} | jq '. | to_entries | map("\(.key)=\(.value)") | .[]' -r)'" \
  -e "infile='${OUTPUT_DIR}/concurrent_requests.dat'" \
  -e "outfile='${OUTPUT_DIR}/concurrent_requests.svg'" \
  ${DIR}/concurrency/concurrent_requests.gpi

gnuplot \
  -e "parameters='$(cat ${HTTP_TEST_PARAMETERS_PATH} | jq '. | to_entries | map("\(.key)=\(.value)") | .[]' -r)'" \
  -e "infile='${OUTPUT_DIR}/requests.dat'" \
  -e "outfile='${OUTPUT_DIR}/requests.svg'" \
  ${DIR}/concurrency/requests.gpi

convert "${OUTPUT_DIR}/concurrent_requests.svg" "${OUTPUT_DIR}/concurrent_requests.png"
convert "${OUTPUT_DIR}/requests.svg" "${OUTPUT_DIR}/requests.png"

echo "wrote files to $OUTPUT_DIR"
